{"id":171,"date":"2013-12-26T13:59:48","date_gmt":"2013-12-26T19:59:48","guid":{"rendered":"http:\/\/justhum.com\/blog\/?p=171"},"modified":"2014-01-07T12:43:15","modified_gmt":"2014-01-07T18:43:15","slug":"fighting-ios7-control-center-uibuttons","status":"publish","type":"post","link":"https:\/\/justhum.com\/blog\/fighting-ios7-control-center-uibuttons\/","title":{"rendered":"Fighting iOS7&#8217;s Control Center with UIButtons at the bottom of the screen."},"content":{"rendered":"<p>Do me a favor and load up the calendar app on iOS7. Now, at the bottom tap &#8220;Today&#8221;. Did the word &#8220;Today&#8221; highlight? No? Try it again. And again. Wait, it just worked? Press it again. I bet it didn&#8217;t work. It&#8217;s completely random, and depends on how quickly you press the button.<\/p>\n<p>The same goes for <em>any<\/em> button in the bottom 50 or so pixels of the screen. As of iOS 7.0.4, both the back gesture and the one for bringing up the Control Center eat highlighted button states. Not only do we have borderless buttons by default, but only about 10% of the time do they have a highlighted state. This is a fundamental flaw in UX.<\/p>\n<p>In Hum we took cues from the UISlider Control to create nice, tappable buttons. We have an obvious pressed or highlighted state as well. These states are important for UI feedback, if only to confirm that I did indeed press a button. These controls don&#8217;t need to be as obvious as we&#8217;ve designed for Hum, but it&#8217;s important that <em>something<\/em> happens.<\/p>\n<div id=\"attachment_177\" style=\"width: 303px\" class=\"wp-caption aligncenter\"><img aria-describedby=\"caption-attachment-177\" src=\"http:\/\/justhum.com\/blog\/wp-content\/uploads\/2013\/12\/buttons1.png\" alt=\"Hum&#039;s Buttons\" width=\"293\" class=\"size-full wp-image-177\" srcset=\"https:\/\/justhum.com\/blog\/wp-content\/uploads\/2013\/12\/buttons1.png 586w, https:\/\/justhum.com\/blog\/wp-content\/uploads\/2013\/12\/buttons1-300x264.png 300w\" sizes=\"(max-width: 586px) 100vw, 586px\" \/><p id=\"caption-attachment-177\" class=\"wp-caption-text\">Hum&#8217;s Buttons<\/p><\/div>\n<p>So if the highlight events are being eaten by the back and control center gestures at an OS level, how am I supposed to give the user feedback that the button was even pressed?<\/p>\n<h3>A workaround.<\/h3>\n<p>We&#8217;ve found a pretty simple workaround for this. Instead of using standard properties like button.highlighted = YES or button.selected = YES that don&#8217;t work anyway in that bottom band, we simply fake a highlight by first delaying the final method that&#8217;s called on button press. Simply set the background image of the unhighlighted button to the highlighted state with an unperceived delay BEFORE we call the final method. It looks like this:<\/p>\n<pre>\r\n[self.stopRecordingButton setImage:[UIImage imageNamed:@\"stopRecordingButton\"] forState:UIControlStateNormal];\r\n[self.stopRecordingButton setImage:[UIImage imageNamed:@\"stopRecordingButton-highlighted\"] forState:UIControlStateHighlighted];\r\n[self.stopRecordingButton addTarget:self action:@selector(stopRecordingDelay) forControlEvents:UIControlEventTouchUpInside];\r\n\r\n-(void)stopRecordingDelay\r\n{\r\n\u00a0\u00a0\u00a0 [self.stopRecordingButton setImage:[UIImage imageNamed:@\"stopRecordingButton-highlighted\"] forState:UIControlStateNormal];\r\n\r\n\u00a0\u00a0\u00a0 [self performSelector:@selector(stopRecording) withObject:nil afterDelay:0.025f];\r\n}\r\n\r\n- (void)stopRecording\r\n{\r\n\u00a0\u00a0\u00a0 [self.stopRecordingButton setImage:[UIImage imageNamed:@\"stopRecordingButton\"] forState:UIControlStateNormal];\r\n\r\n\u00a0\u00a0\u00a0 \/\/Do real stuff\r\n}\r\n<\/pre>\n<p>When creating our buttons we set two images for the button, one for normal, the other for highlighted. Pay attention to the image names.<\/p>\n<p>We then tell the button to call an intermediary method that sets the unhighlighted button&#8217;s background to the highlighted state, faking the standard highlighting interaction that doesn&#8217;t work in that 50px space at the bottom of the screen. After a tiny, unperceived delay of .025 seconds we then call our real method and reset our button, if needed, to the original, unhighlighted state.<\/p>\n<p>Now, regardless of how quickly the user taps the buttons within that bottom band they&#8217;ll receive the feedback that their button was pressed.<\/p>\n<p>Not the worst hack on the planet, I hope.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Do me a favor and load up the calendar app on iOS7. Now, at the bottom tap &#8220;Today&#8221;. Did the word &#8220;Today&#8221; highlight? No? Try it again. And again. Wait, it just worked? Press it again. I bet it didn&#8217;t work. It&#8217;s completely random, and depends on how quickly you press the button. The same [&hellip;]<\/p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"closed","ping_status":"closed","sticky":false,"template":"","format":"standard","meta":[],"categories":[1],"tags":[],"_links":{"self":[{"href":"https:\/\/justhum.com\/blog\/wp-json\/wp\/v2\/posts\/171"}],"collection":[{"href":"https:\/\/justhum.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/justhum.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/justhum.com\/blog\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/justhum.com\/blog\/wp-json\/wp\/v2\/comments?post=171"}],"version-history":[{"count":13,"href":"https:\/\/justhum.com\/blog\/wp-json\/wp\/v2\/posts\/171\/revisions"}],"predecessor-version":[{"id":186,"href":"https:\/\/justhum.com\/blog\/wp-json\/wp\/v2\/posts\/171\/revisions\/186"}],"wp:attachment":[{"href":"https:\/\/justhum.com\/blog\/wp-json\/wp\/v2\/media?parent=171"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/justhum.com\/blog\/wp-json\/wp\/v2\/categories?post=171"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/justhum.com\/blog\/wp-json\/wp\/v2\/tags?post=171"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}